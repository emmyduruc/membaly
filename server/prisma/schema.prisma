generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  role            Role             @default(USER)
  verified        Boolean          @default(false)
  visibleInSearch Boolean          @default(true)
  stripeCustomerId String?
  memberships     Membership[]
  ratings         Rating[]
  favorites       Favorite[]
  successStories  SuccessStory[]
  subscriptions   Subscription[]
  recommendations Recommendation[]
  payments        Payment[]
}

model Membership {
  id              String           @id @default(uuid())
  title           String
  description     String
  price           Float
  paymentType     PaymentType      @default(FREE) // One-time, recurring, or free
  recurringType   RecurringType?   // Monthly, yearly, quarterly (if paymentType = recurring)
  benefits        String[]
  pictures        String[]
  creatorId       String
  stripePriceId   String?
  creator         User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  ratings         Rating[]
  categoryTags    CategoryTags[]   @relation("MembershipCategoryTags")
  recommendations Recommendation[]
  favorites       Favorite[]
  successStories  SuccessStory[]
  subscriptions   Subscription[]
  payments        Payment[]
}

model Subscription {
  id           String             @id @default(uuid())
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  subscriptionType RecurringType  @default(MONTHLY)
  stripeSubscriptionId String
  amount       Float
  membership   Membership         @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  status       SubscriptionStatus @default(inactive)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  expiresAt    DateTime?
}

model Payment {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  paymentType  PaymentType   @default(FREE)    
  membership   Membership    @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  amount       Float
  currency     String        @default("USD")
  status       PaymentStatus
  paymentDate  DateTime      @default(now())
}

model Category {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  tags        CategoryTags[] @relation("CategoryTagsCategory")
}

model Tag {
  id         String         @id @default(uuid())
  name       String         @unique
  categories CategoryTags[] @relation("CategoryTagsTag")
}

model CategoryTags {
  id          String       @id @default(uuid())
  categoryId  String
  tagId       String
  category    Category     @relation("CategoryTagsCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  tag         Tag          @relation("CategoryTagsTag", fields: [tagId], references: [id], onDelete: Cascade)
  memberships Membership[] @relation("MembershipCategoryTags")

  @@unique([categoryId, tagId])
}

model Rating {
  id           String     @id @default(uuid())
  score        Int
  comment      String?
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Recommendation {
  id            String     @id @default(uuid())
  recommenderId String
  recommender   User       @relation(fields: [recommenderId], references: [id], onDelete: Cascade)
  membershipId  String
  membership    Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
}

model Favorite {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model SuccessStory {
  id           String     @id @default(uuid())
  title        String
  content      String
  media        String[]
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

enum Role {
  USER
  CREATOR
  ADMIN
}

enum PaymentType {
  ONE_TIME
  RECURRING
  FREE
}

enum RecurringType {
  MONTHLY
  YEARLY
  QUARTERLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  inactive
  past_due
  canceled
  unpaid
  paused
}
