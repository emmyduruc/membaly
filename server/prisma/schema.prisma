generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  role            Role             @default(USER)
  verified        Boolean          @default(false)
  visibleInSearch Boolean          @default(true)
  memberships     Membership[]
  ratings         Rating[]
  favorites       Favorite[]
  successStories  SuccessStory[]
  Subscription    Subscription[]
  Recommendation  Recommendation[]
}

model Membership {
  id              String           @id @default(uuid())
  title           String
  description     String
  price           Float
  benefits        String[]
  pictures        String[]
  creatorId       String
  creator         User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  ratings         Rating[]
  categoryTags    CategoryTags[]   @relation("MembershipCategoryTags")
  recommendations Recommendation[]
  favorites       Favorite[]
  successStories  SuccessStory[]
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  tags        CategoryTags[] @relation("CategoryTagsCategory")
}

model Tag {
  id         String         @id @default(uuid())
  name       String         @unique
  categories CategoryTags[] @relation("CategoryTagsTag")
}

model CategoryTags {
  id          String       @id @default(uuid())
  categoryId  String
  tagId       String
  category    Category     @relation("CategoryTagsCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  tag         Tag          @relation("CategoryTagsTag", fields: [tagId], references: [id], onDelete: Cascade)
  memberships Membership[] @relation("MembershipCategoryTags")

  @@unique([categoryId, tagId]) // Ensures a unique combination of category and tag
}

model Rating {
  id           String     @id @default(uuid())
  score        Int
  comment      String?
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Recommendation {
  id            String     @id @default(uuid())
  recommenderId String
  recommender   User       @relation(fields: [recommenderId], references: [id], onDelete: Cascade)
  membershipId  String
  membership    Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
}

model Favorite {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model SuccessStory {
  id           String     @id @default(uuid())
  title        String
  content      String
  media        String[]
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

enum Role {
  USER
  CREATOR
  ADMIN
}
